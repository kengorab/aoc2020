val input = if readFile("./input.txt") |input| {
  input.trim().lines()
} else {
  []
}

func wonkyMath(input: String, getPrec: (String) => Int?): Int {
  val tokens = input.split("").filter(t => t != " ")
  var idx = 0

  func peek(): String? = tokens[idx]
  func next(): String? {
    idx += 1
    tokens[idx - 1]
  }

  func parsePrec(prec: Int): Int {
    val prefixTok = next() ?: ""

    var left = 0
    if prefixTok.parseInt() |num| {
      left = num
    } else if prefixTok == "(" {
      left = parseGroup()
    }

    while true {
      if peek() |infixTok| {
        if getPrec(infixTok) |nextPrec| {
          if prec < nextPrec {
            left = parseInfix(left, next() ?: "")
          } else {
            break
          }
        } else {
          break
        }
      } else {
        break
      }
    }

    left
  }

  func parseGroup(): Int {
    val v = parsePrec(1)
    next() // consume ')'
    v
  }

  func parseInfix(left: Int, op: String): Int {
    val opPrec = getPrec(op) ?: 0
    if op == "+" {
      left + parsePrec(opPrec)
    } else if op == "-" {
      left - parsePrec(opPrec)
    } else if op == "*" {
      left * parsePrec(opPrec)
    } else {
      (left / parsePrec(opPrec)).round()
    }
  }

  parsePrec(1)
}

func part1(): Int {
  func getPrec(token: String): Int? {
    if token.parseInt() {
      1
    } else if ["+", "-", "*", "/"].contains(token) {
      2
    } else if token == "(" {
      3
    }
  }

  input.map(line => wonkyMath(line, getPrec)).reduce(0, (acc, n) => acc + n)
}
println("Part 1: " + part1()) // 21022630974613

func part2(): Int {
  func getPrec(token: String): Int? {
    if token.parseInt() {
      1
    } else if ["*", "/"].contains(token) {
      2
    } else if ["+", "-"].contains(token) {
      3
    } else if token == "(" {
      4
    }
  }

  input.map(line => wonkyMath(line, getPrec)).reduce(0, (acc, n) => acc + n)
}
println("Part 2: " + part2()) // 169899524778212
