func getInput(): (Int[], Int[]) {
  val decks: Int[][] = if readFile("./input.txt") |input| {
    input.trim().split("\n\n")
      .map(s => s.split("\n")[1:].map(ch => ch.parseInt() ?: 0))
  } else {
    []
  }
  val p1 = decks[0] ?: [0]
  val p2 = decks[1] ?: [0]
  (p1, p2)
}

func score(p1: Int[], p2: Int[]): Int {
  val winner = if p1.isEmpty() { p2 } else { p1 }
  var idx = winner.length
  winner.reduce(0, (acc, c) => {
    idx -= 1
    acc + c * (idx + 1)
  })
}

func part1(): Int {
  val decks = getInput()
  val p1 = decks[0]
  val p2 = decks[1]

  while !p1.isEmpty() && !p2.isEmpty() {
    val c1 = p1.popFront() ?: 0
    val c2 = p2.popFront() ?: 0

    if c1 > c2 {
      p1.push(c1)
      p1.push(c2)
    } else {
      p2.push(c2)
      p2.push(c1)
    }
  }

  score(p1, p2)
}
println("Part 1: " + part1()) // 33010

func part2(): Int {
  val decks = getInput()
  val p1 = decks[0]
  val p2 = decks[1]

  func serialize(p1: Int[], p2: Int[]): String = p1.join(",") + "|" + p2.join(",")

  func playGame(p1: Int[], p2: Int[], subGame = 0): Int {
    val memo: Set<String> = #{}

    while !p1.isEmpty() && !p2.isEmpty() {
      val key = serialize(p1, p2)

      if memo.contains(key) {
        return 1
      }
      memo.insert(key)

      val c1 = p1.popFront() ?: 0
      val c2 = p2.popFront() ?: 0

      if c1 <= p1.length && c2 <= p2.length {
        val subGameWinner = playGame(p1[:c1], p2[:c2], subGame + 1)
        if subGameWinner == 1 {
          p1.push(c1)
          p1.push(c2)
        } else {
          p2.push(c2)
          p2.push(c1)
        }
      } else {
        if c1 > c2 {
          p1.push(c1)
          p1.push(c2)
        } else {
          p2.push(c2)
          p2.push(c1)
        }
      }
    }
    if !p1.isEmpty() { 1 } else { 2 }
  }

  playGame(p1, p2)
  score(p1, p2)
}
println("Part 2: " + part2()) // 32769
